using Microsoft.EntityFrameworkCore.Scaffolding.Metadata;
using Microsoft.SqlServer.Dac.Extensions.Prototype;
using Microsoft.SqlServer.Dac.Model;
using NUnit.Framework;
using ReverseEngineer20.ReverseEngineer;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace UnitTests
{
    [TestFixture]
    public class DacpacTest
    {
        private static readonly ISet<string> _dateTimePrecisionTypes = new HashSet<string> { "datetimeoffset", "datetime2", "time" };

        private static readonly ISet<string> _maxLengthRequiredTypes
            = new HashSet<string> { "binary", "varbinary", "char", "varchar", "nchar", "nvarchar" };

        private TSqlTypedModel model;
        [SetUp]
        public void Setup()
        {
            model = new TSqlTypedModel("Chinook.dacpac");
        }

        [Test]
        public void CanGetTableNames()
        {
            // Arrange
            var builder = new DacpacTableListBuilder("Chinook.dacpac");

            // Act
            var result = builder.GetTableNames();

            // Assert
            Assert.AreEqual("dbo.Album", result[0]);
            Assert.AreEqual(11, result.Count);
        }

        [Test]
        public void CanEnumerateTables()
        {
            //TODO type aliases - later
            //TSqlUserDefinedType

            var dbModel = new DatabaseModel();
            dbModel.DatabaseName = Path.GetFileNameWithoutExtension("Chinook.dacpac");

            var tables = model.GetObjects<TSqlTable>(DacQueryScopes.UserDefined)
                .Where(t => t.PrimaryKeyConstraints.Count() > 0
                && !t.GetProperty<bool>(Table.IsAutoGeneratedHistoryTable))
                .ToList();
            
            //TODO Table filtering
            // Exclude HistoryRepository.DefaultTableName

            foreach (var item in tables)
            {
                var dbTable = new DatabaseTable
                {
                    Name = item.Name.Parts[1],
                    Schema = item.Name.Parts[0],

                };
                dbTable["SqlServer:MemoryOptimized"] = item.MemoryOptimized;

                GetColumns(item, dbTable);

                GetPrimaryKey(item, dbTable);

                //dbTable.ForeignKeys.Add( = null;
                //dbTable.UniqueConstraints = null;
                //dbTable.Indexes = null;

                dbModel.Tables.Add(dbTable);
            }

            // Assert
            Assert.AreEqual(tables.Count(), dbModel.Tables.Count());
        }

        private void GetColumns(TSqlTable item, DatabaseTable dbTable)
        {
            var tableColumns = item.Columns
                .Where(i => !i.GetProperty<bool>(Column.IsHidden)
                && i.ColumnType != ColumnType.ColumnSet
                );

            foreach (var col in item.Columns)
            {
                //TODO Alias support (later)
                //string storeType;
                //if (typeAliases.TryGetValue($"[{dataTypeSchemaName}].[{dataTypeName}]", out var underlyingStoreType))
                //{
                //    storeType = dataTypeName;
                //}
                //else
                //{
                //    storeType = GetStoreType(dataTypeName, maxLength, precision, scale);
                //    underlyingStoreType = null;
                //}
                //if ((underlyingStoreType ?? storeType) == "rowversion")
                //{
                //    column[ScaffoldingAnnotationNames.ConcurrencyToken] = true;
                //}
                //dbColumn.SetUnderlyingStoreType(underlyingStoreType);

                var dataTypeName = ShowType(col.DataType);
                string storeType = GetStoreType(dataTypeName, col.Length, col.Precision, col.Scale);

                var dbColumn = new DatabaseColumn
                {
                        Table = dbTable,
                        Name = col.Name.Parts[2],
                        IsNullable = col.Nullable,
                        StoreType = GetStoreType(dataTypeName, col.Length, col.Precision, col.Scale)
                };
                    
                //TSqlDefaultConstraint
                //dbColumn.ComputedColumnSql = null;
                //dbColumn.DefaultValueSql = null;
                                
                dbColumn.ValueGenerated = null;

                if (col.IsIdentity)
                {
                    dbColumn.ValueGenerated = Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd;
                }
                if (dbColumn.StoreType.Contains("rowversion"))
                {
                    dbColumn.ValueGenerated = Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAddOrUpdate;
                    dbColumn["ConcurrencyToken"] = true;
                }

                dbTable.Columns.Add(dbColumn);
            }
        }

        private static string GetStoreType(string dataTypeName, int maxLength, int precision, int scale)
        {
            if (dataTypeName == "timestamp")
            {
                return "rowversion";
            }

            if (dataTypeName == "decimal"
                || dataTypeName == "numeric")
            {
                return $"{dataTypeName}({precision}, {scale})";
            }

            if (_dateTimePrecisionTypes.Contains(dataTypeName)
                && scale != 7)
            {
                return $"{dataTypeName}({scale})";
            }

            if (_maxLengthRequiredTypes.Contains(dataTypeName))
            {
                if (maxLength == -1)
                {
                    return $"{dataTypeName}(max)";
                }

                if (dataTypeName == "nvarchar"
                    || dataTypeName == "nchar")
                {
                    maxLength /= 2;
                }

                return $"{dataTypeName}({maxLength})";
            }

            return dataTypeName;
        }

        private string ShowType(IEnumerable<ISqlDataType> types)
        {
            var builder = new StringBuilder();
            foreach (var type in types)
            {
                var t = new TSqlDataType(type.Element);
                builder.Append($"{t.Name.Parts[0].ToString()}");
            }
            return builder.ToString();
        }

        private void GetPrimaryKey(TSqlTable table, DatabaseTable dbTable)
        {
            if (table.PrimaryKeyConstraints.Count() > 0)
            {
                var pk = table.PrimaryKeyConstraints.First();
                var primaryKey = new DatabasePrimaryKey();
                primaryKey.Name = pk.Name.Parts[1];
                primaryKey.Table = dbTable;

                foreach (var pkCol in pk.Columns)
                {
                    var dbCol = dbTable.Columns
                        .Where(c => c.Name == pkCol.Name.Parts[2])
                        .Single();

                    primaryKey.Columns.Add(dbCol);
                }
            };
        }
    }
}
